### YamlMime:ManagedReference
items:
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  commentId: T:RWD.Toolbox.PasswordGenerator.PasswordGenerator
  id: PasswordGenerator
  parent: RWD.Toolbox.PasswordGenerator
  children:
  - RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor
  - RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[])
  - RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[],System.Char[],System.Char[],System.Char[])
  - RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32)
  - RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: PasswordGenerator
  nameWithType: PasswordGenerator
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  type: Class
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: PasswordGenerator
    path: ../PasswordGenerator.cs
    startLine: 29
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nA Tool Used to Generate Random Passwords\n"
  example: []
  syntax:
    content: 'public class PasswordGenerator : object, IPasswordGenerator'
    content.vb: >-
      Public Class PasswordGenerator
          Inherits Object
          Implements IPasswordGenerator
  inheritance:
  - System.Object
  implements:
  - RWD.Toolbox.PasswordGenerator.IPasswordGenerator
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor
  commentId: M:RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor
  id: '#ctor'
  parent: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  langs:
  - csharp
  - vb
  name: PasswordGenerator()
  nameWithType: PasswordGenerator.PasswordGenerator()
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator()
  type: Constructor
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: .ctor
    path: ../PasswordGenerator.cs
    startLine: 48
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nDefault Constructor\n<p>Default AlphaSet: abcdefghijklmnopqrstuvwxyz </p>\n<p>Default NumberSet: 1234567890 </p>\n<p>Default SpecialSet: !@#$%^&amp;*()_+= </p>\n"
  remarks: This will generate passwords using the default character sets with no excluded characters.
  example: []
  syntax:
    content: public PasswordGenerator()
    content.vb: Public Sub New
  overload: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[])
  commentId: M:RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[])
  id: '#ctor(System.Char[])'
  parent: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  langs:
  - csharp
  - vb
  name: PasswordGenerator(Char[])
  nameWithType: PasswordGenerator.PasswordGenerator(Char[])
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator(System.Char[])
  type: Constructor
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: .ctor
    path: ../PasswordGenerator.cs
    startLine: 64
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nDefaults with Exclusions Constructor\n<p>Default AlphaSet: abcdefghijklmnopqrstuvwxyz </p>\n<p>Default NumberSet: 1234567890 </p>\n<p>Default SpecialSet: !@#$%^&amp;*()_+= </p>\n"
  remarks: This will generate passwords using the default character sets EXCEPT excluded characters.
  example: []
  syntax:
    content: public PasswordGenerator(char[] excludeChars)
    parameters:
    - id: excludeChars
      type: System.Char[]
      description: Array of Characters to NOT use in creating the password as <xref href="char%5b%5d" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(excludeChars As Char())
  overload: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor*
  nameWithType.vb: PasswordGenerator.PasswordGenerator(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator(System.Char())
  name.vb: PasswordGenerator(Char())
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[],System.Char[],System.Char[],System.Char[])
  commentId: M:RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor(System.Char[],System.Char[],System.Char[],System.Char[])
  id: '#ctor(System.Char[],System.Char[],System.Char[],System.Char[])'
  parent: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  langs:
  - csharp
  - vb
  name: PasswordGenerator(Char[], Char[], Char[], Char[])
  nameWithType: PasswordGenerator.PasswordGenerator(Char[], Char[], Char[], Char[])
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator(System.Char[], System.Char[], System.Char[], System.Char[])
  type: Constructor
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: .ctor
    path: ../PasswordGenerator.cs
    startLine: 91
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nFull Details Constructor\n"
  remarks: Any parameter equal to null will force use of default values
  example: []
  syntax:
    content: public PasswordGenerator(char[] alphaChars, char[] numericChars, char[] specialChars, char[] excludeChars)
    parameters:
    - id: alphaChars
      type: System.Char[]
      description: "\nArray of ALPHABETIC Characters to use in creating the password as <xref href=\"char%5b%5d\" data-throw-if-not-resolved=\"false\"></xref>\n<p>If Null Defaults to: abcdefghijklmnopqrstuvwxyz </p>\n"
    - id: numericChars
      type: System.Char[]
      description: "\nArray of NUMERIC Characters to use in creating the password as <xref href=\"char%5b%5d\" data-throw-if-not-resolved=\"false\"></xref>\n<p>If Null Defaults to: 1234567890 </p>\n"
    - id: specialChars
      type: System.Char[]
      description: "\nArray of SPECIAL Characters to use in creating the password as <xref href=\"char%5b%5d\" data-throw-if-not-resolved=\"false\"></xref>\n<p>If Null Defaults to: !@#$%^&amp;*()_+= </p>\n"
    - id: excludeChars
      type: System.Char[]
      description: Array of Characters to NOT use in creating the password as <xref href="char%5b%5d" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(alphaChars As Char(), numericChars As Char(), specialChars As Char(), excludeChars As Char())
  overload: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor*
  nameWithType.vb: PasswordGenerator.PasswordGenerator(Char(), Char(), Char(), Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator(System.Char(), System.Char(), System.Char(), System.Char())
  name.vb: PasswordGenerator(Char(), Char(), Char(), Char())
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32)
  commentId: M:RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32)
  id: Generate(System.Int32)
  parent: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  langs:
  - csharp
  - vb
  name: Generate(Int32)
  nameWithType: PasswordGenerator.Generate(Int32)
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32)
  type: Method
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: Generate
    path: ../PasswordGenerator.cs
    startLine: 101
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nGenerate a Random Password with no repeating characters\n"
  example: []
  syntax:
    content: public string Generate(int pwdLength)
    parameters:
    - id: pwdLength
      type: System.Int32
      description: Length of Password
    return:
      type: System.String
      description: Password as <see cref="!:System.String"></see>
    content.vb: Public Function Generate(pwdLength As Integer) As String
  overload: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate*
  implements:
  - RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  commentId: M:RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  id: Generate(System.Int32,System.Boolean,System.Boolean)
  parent: RWD.Toolbox.PasswordGenerator.PasswordGenerator
  langs:
  - csharp
  - vb
  name: Generate(Int32, Boolean, Boolean)
  nameWithType: PasswordGenerator.Generate(Int32, Boolean, Boolean)
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate(System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Source/RWD.Toolbox.PasswordGenerator/RWD.Toolbox.PasswordGenerator/PasswordGenerator.cs
    id: Generate
    path: ../PasswordGenerator.cs
    startLine: 107
  assemblies:
  - RWD.Toolbox.PasswordGenerator
  namespace: RWD.Toolbox.PasswordGenerator
  summary: "\nGenerate a Random Password\n"
  example: []
  syntax:
    content: public string Generate(int pwdLength, bool allowRepeatCharacters, bool allowConsecutiveCharacters)
    parameters:
    - id: pwdLength
      type: System.Int32
      description: Length of Password
    - id: allowRepeatCharacters
      type: System.Boolean
    - id: allowConsecutiveCharacters
      type: System.Boolean
    return:
      type: System.String
      description: Password as <see cref="!:System.String"></see>
    content.vb: Public Function Generate(pwdLength As Integer, allowRepeatCharacters As Boolean, allowConsecutiveCharacters As Boolean) As String
  overload: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate*
  implements:
  - RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator
  commentId: T:RWD.Toolbox.PasswordGenerator.IPasswordGenerator
  parent: RWD.Toolbox.PasswordGenerator
  name: IPasswordGenerator
  nameWithType: IPasswordGenerator
  fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator
- uid: RWD.Toolbox.PasswordGenerator
  commentId: N:RWD.Toolbox.PasswordGenerator
  name: RWD.Toolbox.PasswordGenerator
  nameWithType: RWD.Toolbox.PasswordGenerator
  fullName: RWD.Toolbox.PasswordGenerator
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor*
  commentId: Overload:RWD.Toolbox.PasswordGenerator.PasswordGenerator.#ctor
  name: PasswordGenerator
  nameWithType: PasswordGenerator.PasswordGenerator
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.PasswordGenerator
- uid: char[]
  commentId: T:char[]
  isExternal: true
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
  commentId: M:RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
  parent: RWD.Toolbox.PasswordGenerator.IPasswordGenerator
  isExternal: true
  name: Generate(Int32)
  nameWithType: IPasswordGenerator.Generate(Int32)
  fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
  spec.csharp:
  - uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
    name: Generate
    nameWithType: IPasswordGenerator.Generate
    fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32)
    name: Generate
    nameWithType: IPasswordGenerator.Generate
    fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate*
  commentId: Overload:RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate
  name: Generate
  nameWithType: PasswordGenerator.Generate
  fullName: RWD.Toolbox.PasswordGenerator.PasswordGenerator.Generate
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  commentId: M:RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
  parent: RWD.Toolbox.PasswordGenerator.IPasswordGenerator
  isExternal: true
  name: Generate(Int32, Boolean, Boolean)
  nameWithType: IPasswordGenerator.Generate(Int32, Boolean, Boolean)
  fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
    name: Generate
    nameWithType: IPasswordGenerator.Generate
    fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean)
    name: Generate
    nameWithType: IPasswordGenerator.Generate
    fullName: RWD.Toolbox.PasswordGenerator.IPasswordGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
